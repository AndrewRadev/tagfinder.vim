*tagfinder.txt*	Search for tags by their kind

==============================================================================
CONTENTS                                      *tagfinder* *tagfinder-contents*

    Installation...........................: |tagfinder-installation|
    Usage..................................: |tagfinder-usage|
    Commands...............................: |tagfinder-commands|
    Issues.................................: |tagfinder-issues|


==============================================================================
INSTALLATION                                          *tagfinder-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/tagfinder.vim.git ~/.vim/bundle/tagfinder
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/tagfinder.vim.git bundle/tagfinder
<
Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.

After the plugin is installed, you can use |:DefineTagFinder| to define global
tag-searching commands, or |:DefineLocalTagFinder| to define buffer-local ones.
See |tagfinder-usage| section for more details.

Note that the plugin does not add any tagfinders by default. It simply
provides the command to create them in a simple way.


==============================================================================
USAGE                                                        *tagfinder-usage*

The purpose of this plugin is to enable searching for classes, functions or any
other language structures by their name. It expects a tag file generated by
using exuberant ctags. It's very similar to the built-in |:tag| command, but
with two added bonuses:

- It can filter tags by their type
- It opens the results in a quickfix window if there's more than one

The plugin defines a command, |:DefineTagFinder| that lets you create a command
that does just that. The syntax is:
>
    " in after/plugin/tagfinders.vim, for example
    DefineTagFinder FindClass c,class

    " or, in your .vimrc:
    " first, load the plugin:
    runtime plugin/tagfinder.vim
    " then, define the command as before
    DefineTagFinder FindClass c,class
<
After this command is invoked, you can execute the `:FindClass` command with a
tag name, which will send you to the class if it's unique, or load the entries
in the quickfix window and let you choose between them.
>
    :FindClass ActiveRecord
<
Even more conveniently, the newly defined command will have tab-completion with
the tag names, so you don't have to type it all in and you can see a useful
overview of the matching classes (or functions, modules, vim commands...).

You can also define a command without providing filters for particular tag
kinds:
>
    DefineTagFinder Tag
<
The new `:Tag` command would now act like the built-in |:tag| command, except
it would use the quickfix window for results.

Since different file types have different tag definitions, you can override
commands per buffer by placing `DefineLocalTagFinder` invocations in filetype
plugins, or by using autocommands:
>
    " in ftplugin/ruby.vim
    DefineLocalTagFinder Method      f,method
    DefineLocalTagFinder ClassMethod F,singleton\ method

    " in .vimrc
    autocommand FileType java DefineLocalTagFinder Method m,method
<
Notice the escaped space in "singleton\ method". The `Define` commands expect
to be given two space-separated arguments -- the name and the kinds. Because of
that, the kinds themselves should have no unescaped spaces in them.

The plugin comes with no predefined finder commands. My personal preference is
to call them "Class", "Function" and so on, but you might prefer to use
"FindClass" and "FindFunction" instead. The plugin simply provides the defining
commands.

==============================================================================
COMMANDS                                                   *tagfinder-commands*

                                              *:DefineTagFinder*
:DefineTagFinder {name} {kinds}
                    Defines a "tagfinder" command with the name {name}. The
                    new command accepts a single parameter, which should be a
                    tag.

                    In the case of a unique tag, the user is sent to its
                    definition. Otherwise, the quickfix window is opened with
                    all matches. The command is auto-completed with the
                    appropriate tags.

                    The tags that are retrieved and the ones that are used for
                    completion are both filtered by the {kinds} parameter,
                    which should be a comma-separated list of ctags kinds.


                                              *:DefineLocalTagFinder*
:DefineLocalTagFinder {name} {kinds}
                    Defines a "tagfinder" command with the name {name}, which
                    is only active in the current buffer. This could be done
                    in a filetype plugin or in an autocommand. The new command
                    accepts a single parameter, which should be a tag.

                    In the case of a unique tag, the user is sent to its
                    definition. Otherwise, the quickfix window is opened with
                    all matches. The command is auto-completed with the
                    appropriate tags.

                    The tags that are retrieved and the ones that are used for
                    completion are both filtered by the {kinds} parameter,
                    which should be a comma-separated list of ctags kinds.


==============================================================================
ISSUES                                                      *tagfinder-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/tagfinder.vim/issues

vim:tw=78:sw=4:ft=help:norl:
