==============================================================================
CONTENTS                                      *tagfinder* *tagfinder-contents*

    Installation...........................: |tagfinder-installation|
    Usage..................................: |tagfinder-usage|
    Commands...............................: |tagfinder-commands|
    Issues.................................: |tagfinder-issues|


==============================================================================
INSTALLATION                                          *tagfinder-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/tagfinder.vim.git ~/.vim/bundle/tagfinder
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/tagfinder.vim.git bundle/tagfinder
<
Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.

After the plugin is installed, you can use |:DefineTagFinder| to define global
tag-searching commands, or |:DefineLocalTagFinder| to define buffer-local ones.
See |tagfinder-usage| section for more details.

Note that the plugin does not add any tagfinders by default. It simply
provides the command to create them in a simple way.


==============================================================================
USAGE                                                        *tagfinder-usage*

The plugin's purpose is to simplify searching for tags by their kind. The most
common way of using tags is by pressing <C-]> on them, but it's often needed
to look for identifiers that are not close to the cursor. The built-in |:tag|
command could do the trick, but it would be somewhat useful to be able to
limit its results to only specific language tokens -- classes, modules,
functions.

The plugin defines a command, |:DefineTagFinder| that lets you create a command
that does just that. The syntax is:
>
    " in after/plugin/tagfinders.vim, for example
    DefineTagFinder FindFunction f,function

    " or, in .vimrc:
    runtime plugin/tagfinder.vim
    DefineTagFinder FindFunction f,function
<
This will define the command "FindFunction", which will look for tags with the
kind "f" or the kind "function". The name can be anything you like. The kinds
list needs to be space-escaped. The command will have tab-completion, which
means you can type in the first few characters of the token you're looking for
and let vim suggest the rest.

It's important to note that this needs to placed in a file within
"after/plugin". It would also be possible to put it in ".vimrc", as long as
"runtime plugin/tagfinder.vim" is executed before that (it will not be loaded
twice). This is necessary, because plugins are loaded after ".vimrc" is
sourced, so the plugin's commands would not be defined at that time.

Since different languages could use different ctags kinds, you might want to
define buffer-local commands to override the global ones. For that use case,
the plugin provides the |:DefineLocalTagFinder| command with the exact same
syntax:
>
    " in ftplugin/java.vim:
    DefineLocalTagFinder FindFunction m,method

    " or, alternatively, with an autocommand in .vimrc:
    autocmd FileType java DefineLocalTagFinder FindFunction m,method
<

==============================================================================
COMMANDS                                                   *tagfinder-commands*

                                              *:DefineTagFinder*
:DefineTagFinder {name} {kinds}
                    Defines a "tagfinder" command with the name {name}. The
                    new command accepts a single parameter, which should be a
                    tag.

                    In the case of a unique tag, the user is sent to its
                    definition. Otherwise, the quickfix window is opened with
                    all matches. The command is auto-completed with the
                    appropriate tags.

                    The tags that are retrieved and the ones that are used for
                    completion are both filtered by the {kinds} parameter,
                    which should be a comma-separated list of ctags kinds.


                                              *:DefineLocalTagFinder*
:DefineLocalTagFinder {name} {kinds}
                    Defines a "tagfinder" command with the name {name}, which
                    is only active in the current buffer. This could be done
                    in a filetype plugin or in an autocommand. The new command
                    accepts a single parameter, which should be a tag.

                    In the case of a unique tag, the user is sent to its
                    definition. Otherwise, the quickfix window is opened with
                    all matches. The command is auto-completed with the
                    appropriate tags.

                    The tags that are retrieved and the ones that are used for
                    completion are both filtered by the {kinds} parameter,
                    which should be a comma-separated list of ctags kinds.


==============================================================================
ISSUES                                                      *tagfinder-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/tagfinder.vim/issues

vim:tw=78:sw=4:ft=help:norl:
